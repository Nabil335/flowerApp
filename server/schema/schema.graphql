schema {
  query: Query
  mutation: Mutation
}

input AddToBasketInput {
  userId: ID!
  productId: ID!
  amount: Int
  giftWrap: Boolean
  clientMutationId: String!
}

type AddToBasketPayload {
  productLine: ProductLine
  clientMutationId: String!
}

input AddToScheduleInput {
  sessionId: ID!
  clientMutationId: String!
}

type AddToSchedulePayload {
  session: Session
  clientMutationId: String!
}

type Basket implements Node {
  id: ID!
  user: User
  productLines: [ProductLine]
}

type Config {
  wifiNetwork: String
  wifiPassword: String
}

type FAQ implements Node {
  id: ID!
  question: String
  answer: String
}

type Friend {
  id: ID
  name: String
  picture: String
  schedule: [Session]
  favoriteProducts: [Product]
}

type Map {
  id: ID!
  name: String
  map: String
}

type Mutation {
  addToSchedule(input: AddToScheduleInput!): AddToSchedulePayload
  addToBasket(input: AddToBasketInput!): AddToBasketPayload
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  text: String
  url: String
  time: Float
}

type Page implements Node {
  id: ID!
  title: String
  url: String
  logo: String
}

type Product implements Node {
  id: ID!
  title: String
  subTitle: String
  description: String
  type: String
  subType: String
  image: String
  images: [String]
  discount: Int
  price: Int
}

type ProductLine {
  id: ID
  product: Product
  amount: Int
  giftWrap: Boolean
}

type Query {
  node(id: ID!): Node
  viewer: User
  schedule: [Session]
  products: [Product]
  baskets: [Basket]
}

type Session implements Node {
  id: ID!
  title: String
  slug: String
  day: Int
  startTime: Float
  endTime: Float
  location: Map
  description: String
  speakers: [Speaker]
  isAdded: Boolean
  friends: [Friend]
}

type Speaker implements Node {
  id: ID!
  name: String
  title: String
  picture: String
}

type User implements Node {
  id: ID!
  name: String
  friends: [Friend]
  basket: [Basket]
  notifications: [Notification]
  faqs: [FAQ]
  pages: [Page]
  config: Config
}
